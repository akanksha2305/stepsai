import streamlit as st
from retrieval.retrieval import load_index, retrieve_sections
from generation.generation import generate_response

# Load indexes for each book
index_paths = {
        "Introduction to Data Science Using Python": "Introduction-to-Data-Science-AAgah-20240620-1_index.json",
        "Dynamics of the Standard Model": "Dynamicsl_index.json",
        "Research Data Management in the Canadian Context": "Research-Data-Management-in-the-Canadian-Context-1712778191_index.json"
    }

# Load indexes
indexes = {name: load_index(path) for name, path in index_paths.items()}

def retrieve_and_generate(query):
    """
    Retrieve relevant sections from the indexes and generate a response.

    Args:
        query (str): The query string.

    Returns:
        str: The response generated by the QA model.
    """
    all_sections = []

    # Retrieve sections from each book
    for name, index in indexes.items():
        sections = retrieve_sections(query, index.get("root", {}))
        if sections:
            all_sections.extend(sections)
    
    if not all_sections:
        return "No relevant sections found."

    # Generate response
    return generate_response(all_sections, query)

def main():
    st.title("Textbook QA Chatbot")

    user_query = st.text_input("Enter your question:")
    
    if st.button("Get Answer"):
        if user_query:
            response = retrieve_and_generate(user_query)
            st.write("Answer:", response)
        else:
            st.write("Please enter a query.")

if __name__ == "__main__":
    main()